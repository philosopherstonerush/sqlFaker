from enum import Enum


class MySQLDataType(Enum):
    BIGINT = "BIGINT",
    BINARY = "BINARY",
    BIT = "BIT",
    BLOB = "BLOB",
    BOOLEAN = "BOOLEAN",
    CHAR = "CHAR",
    DATE = "DATE",
    DATETIME = "DATETIME",
    DECIMAL = "DECIMAL",
    DOUBLE = "DOUBLE",
    ENUM = "ENUM",
    FLOAT = "FLOAT",
    INTEGER = "INTEGER",
    JSON = "JSON",
    LONGBLOB = "LONGBLOB",
    LONGTEXT = "LONGTEXT",
    MEDIUMBLOB = "MEDIUMBLOB",
    MEDIUMINT = "MEDIUMINT",
    MEDIUMTEXT = "MEDIUMTEXT",
    NCHAR = "NCHAR",
    NVCHAR = "NVARCHAR",
    NUMBERIC = "NUMERIC",
    SET = "SET",
    SMALLINT = "SMALLINT",
    REAL = "REAL",
    TEXT = "TEXT",
    TIME = "TIME",
    TIMESTAMP = "TIMESTAMP",
    TINYBLOB = "TINYBLOB",
    TINYINT = "TINYINT",
    TINYTEXT = "TINYTEXT",
    VARBINARY = "VARBINARY",
    VARCHAR = "VARCHAR",
    YEAR = "YEAR",
    SERIAL = "SERIAL"

    def __str__(self):
        return str(self.value)


class PostgreSqlDataType(Enum):
    INTEGER = "INTEGER",
    BIGINT = "BIGINT",
    SMALLINT = "SMALLINT",
    VARCHAR = "VARCHAR",
    CHAR = "CHAR",
    TEXT = "TEXT",
    NUMERIC = "NUMERIC",
    FLOAT = "FLOAT",
    REAL = "REAL",
    INET = "INET",
    CIDR = "CIDR",
    CITEXT = "CITEXT",
    UUID = "UUID",
    BIT = "BIT",
    MACADDR = "MACADDR",
    MACADDR8 = "MACADDR8",
    MONEY = "MONEY",
    OID = "OID",
    REGCLASS = "REGCLASS",
    REGCONFIG = "REGCONFIG",
    TSQUERY = "TSQUERY",
    DOUBLE_PRECISION = "DOUBLE_PRECISION",
    TIMESTAMP = "TIMESTAMP",
    TIME = "TIME",
    DATE = "DATE",
    BYTEA = "BYTEA",
    BOOLEAN = "BOOLEAN",
    INTERVAL = "INTERVAL",
    ARRAY = "ARRAY",
    ENUM = "ENUM",
    DOMAIN = "DOMAIN",
    HSTORE = "HSTORE",
    INT4RANGE = "INT4RANGE",
    INT8RANGE = "INT8RANGE",
    NUMRANGE = "NUMRANGE",
    DATERANGE = "DATERANGE",
    INT4MULTIRANGE = "INT4MULTIRANGE",
    INT8MULTIRANGE = "INT8MULTIRANGE",
    NUMMULTIRANGE = "NUMMULTIRANGE",
    DATEMULTIRANGE = "DATEMULTIRANGE",
    TSVECTOR = "TSVECTOR",
    TSRANGE = "TSRANGE",
    TSTZRANGE = "TSTZRANGE",
    TSMULTIRANGE = "TSMULTIRANGE",
    TSTZMULTIRANGE = "TSTZMULTIRANGE",
    JSON = "JSON",
    JSONB = "JSONB",
    JSONPATH = "JSONPATH"

    def __str__(self):
        return str(self.value)


class SQLiteDataType(Enum):
    BLOB = "BLOB",
    BOOLEAN = "BOOLEAN",
    CHAR = "CHAR",
    DATE = "DATE",
    DATETIME = "DATETIME",
    DECIMAL = "DECIMAL",
    FLOAT = "FLOAT",
    INTEGER = "INTEGER",
    JSON = "JSON",
    NUMERIC = "NUMERIC",
    SMALLINT = "SMALLINT",
    TEXT = "TEXT",
    TIME = "TIME",
    TIMESTAMP = "TIMESTAMP",
    VARCHAR = "VARCHAR",
    REAL = "REAL"

    def __str__(self):
        return str(self.value)


class OracleDataType(Enum):
    VARCHAR = "VARCHAR",
    NVARCHAR = "NVARCHAR",
    CHAR = "CHAR",
    NCHAR = "NCHAR",
    DATE = "DATE",
    NUMBER = "NUMBER",
    BLOB = "BLOB",
    BFILE = "BFILE",
    CLOB = "CLOB",
    NCLOB = "NCLOB",
    TIMESTAMP = "TIMESTAMP",
    RAW = "RAW",
    FLOAT = "FLOAT",
    DOUBLE_PRECISION = "DOUBLE_PRECISION",
    BINARY_DOUBLE = "BINARY_DOUBLE",
    BINARY_FLOAT = "BINARY_FLOAT",
    LONG = "LONG",
    INTERVAL = "INTERVAL",
    VARCHAR2 = "VARCHAR2",
    NVARCHAR2 = "NVARCHAR2",
    ROWID = "ROWID",
    REAL = "REAL"

    def __str__(self):
        return str(self.value)


class MSSQLDataType(Enum):
    JSON = "JSON",
    INTEGER = "INTEGER",
    BIGINT = "BIGINT",
    SMALLINT = "SMALLINT",
    TINYINT = "TINYINT",
    VARCHAR = "VARCHAR",
    NVARCHAR = "NVARCHAR",
    CHAR = "CHAR",
    NCHAR = "NCHAR",
    TEXT = "TEXT",
    NTEXT = "NTEXT",
    DECIMAL = "DECIMAL",
    NUMERIC = "NUMERIC",
    FLOAT = "FLOAT",
    DATETIME = "DATETIME",
    DATETIME2 = "DATETIME2",
    DATETIMEOFFSET = "DATETIMEOFFSET",
    DATE = "DATE",
    DOUBLE_PRECISION = "DOUBLE_PRECISION",
    TIME = "TIME",
    SMALLDATETIME = "SMALLDATETIME",
    BINARY = "BINARY",
    VARBINARY = "VARBINARY",
    BIT = "BIT",
    REAL = "REAL",
    IMAGE = "IMAGE",
    TIMESTAMP = "TIMESTAMP",
    ROWVERSION = "ROWVERSION",
    MONEY = "MONEY",
    SMALLMONEY = "SMALLMONEY",
    UNIQUEIDENTIFIER = "UNIQUEIDENTIFIER",
    SQL_VARIANT = "SQL_VARIANT",
    XML = "XML"

    def __str__(self):
        return str(self.value)
